{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.tsx"],"sourcesContent":["// src/middleware.ts\n\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// Este middleware se ejecutará para cada ruta definida en el 'matcher'.\nexport function middleware(request: NextRequest) {\n  // 1. Obtener el token de las cookies de la petición.\n  const token = request.cookies.get('token');\n\n  // 2. Si no hay token Y el usuario está intentando acceder a una ruta protegida...\n  if (!token) {\n    // Redirigir al usuario a la página de login.\n    // Usamos la URL absoluta para asegurar que la redirección funcione correctamente.\n    const loginUrl = new URL('/auth/login', request.url);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // 3. Si hay un token, permite que la petición continúe.\n  return NextResponse.next();\n}\n\n// El 'matcher' define en qué rutas se aplicará este middleware.\n// Esto evita que el middleware se ejecute en rutas públicas como\n// la propia página de login, APIs, o archivos estáticos.\nexport const config = {\n  matcher: [\n    /*\n     * Coincide con todas las rutas excepto las que empiezan por:\n     * - api (rutas de API)\n     * - _next/static (archivos estáticos)\n     * - _next/image (optimización de imágenes)\n     * - favicon.ico (el ícono de la página)\n     * - auth/login (la propia página de login para evitar bucles de redirección)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|auth/login).*)',\n  ],\n};"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AAEpB;AAAA;;AAIO,SAAS,WAAW,OAAoB;IAC7C,qDAAqD;IACrD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC;IAElC,kFAAkF;IAClF,IAAI,CAAC,OAAO;QACV,6CAA6C;QAC7C,kFAAkF;QAClF,MAAM,WAAW,IAAI,IAAI,eAAe,QAAQ,GAAG;QACnD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,wDAAwD;IACxD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAKO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}