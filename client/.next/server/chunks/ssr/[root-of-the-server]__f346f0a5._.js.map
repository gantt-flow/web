{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///Users/diegosalinas/Documents/Proyecto%20Modular/web/client/src/app/inicio/page.tsx"],"sourcesContent":["// src/app/inicio/page.tsx\n\n'use client';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Cookies from 'js-cookie';\n\n// src/middleware.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// Este middleware se ejecutará para cada ruta definida en el 'matcher'.\nexport function middleware(request: NextRequest) {\n  // 1. Obtener el token de las cookies de la petición.\n  const token = request.cookies.get('token');\n\n  // 2. Si no hay token Y el usuario está intentando acceder a una ruta protegida...\n  if (!token) {\n    // Redirigir al usuario a la página de login.\n    // Usamos la URL absoluta para asegurar que la redirección funcione correctamente.\n    const loginUrl = new URL('/auth/login', request.url);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // 3. Si hay un token, permite que la petición continúe.\n  return NextResponse.next();\n}\n\n// El 'matcher' define en qué rutas se aplicará este middleware.\n// Esto evita que el middleware se ejecute en rutas públicas como\n// la propia página de login, APIs, o archivos estáticos.\nexport const config = {\n  matcher: [\n    /*\n     * Coincide con todas las rutas excepto las que empiezan por:\n     * - api (rutas de API)\n     * - _next/static (archivos estáticos)\n     * - _next/image (optimización de imágenes)\n     * - favicon.ico (el ícono de la página)\n     * - auth/login (la propia página de login para evitar bucles de redirección)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|auth/login).*)',\n  ],\n};\n\nexport default function HomePage() {\n    const router = useRouter();\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        const token = Cookies.get('token');\n        if (token) {\n            setIsAuthenticated(true);\n        } else {\n            // Si no hay token, redirige al usuario a la página de login.\n            // Esta llamada es asíncrona y puede tardar un poco.\n            router.push('/auth/login');\n        }\n    }, [router]);\n\n    if (!isAuthenticated) {\n        return null;\n    }\n\n    // Si el usuario está autenticado, renderizamos el contenido de la página.\n    return (\n        <div className=\"flex flex-row\">\n            <h1>Bienvenido a la página de inicio</h1>\n        </div>\n    );\n}"],"names":[],"mappings":"AAAA,0BAA0B;;;;;;;AAG1B;AACA;AACA;AAEA,oBAAoB;AACpB;AANA;;;;;;AAUO,SAAS,WAAW,OAAoB;IAC7C,qDAAqD;IACrD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC;IAElC,kFAAkF;IAClF,IAAI,CAAC,OAAO;QACV,6CAA6C;QAC7C,kFAAkF;QAClF,MAAM,WAAW,IAAI,IAAI,eAAe,QAAQ,GAAG;QACnD,OAAO,8HAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,wDAAwD;IACxD,OAAO,8HAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAKO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH;AAEe,SAAS;IACpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,QAAQ,qJAAA,CAAA,UAAO,CAAC,GAAG,CAAC;QAC1B,IAAI,OAAO;YACP,mBAAmB;QACvB,OAAO;YACH,6DAA6D;YAC7D,oDAAoD;YACpD,OAAO,IAAI,CAAC;QAChB;IACJ,GAAG;QAAC;KAAO;IAEX,IAAI,CAAC,iBAAiB;QAClB,OAAO;IACX;IAEA,0EAA0E;IAC1E,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;sBAAG;;;;;;;;;;;AAGhB","debugId":null}}]
}